from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import statsmodels.api as sm
from sklearn.metrics import r2_score 

# for all saterlite 2023

import numpy as np
import matplotlib.pyplot as plt 
import pandas as pd 
import math
f_al = pd.read_excel(r'C:\Users\HP\AppData\Local\Temp\5ec31193-ba89-4bb5-9c09-30a00f4381b6_WAVE_GLO_PHY_SWH_L3_NRT_014_001.7z.1b6\cmems_obs-wave_glo_phy-swh_nrt_al-l3_PT1S_202211\cmems_obs-wave_glo_phy-swh_nrt_al-l3_PT1S_2023.xlsx')
f_c2 = pd.read_excel(r'C:\Users\HP\AppData\Local\Temp\4ba83712-7480-409d-8ecf-bfc1fc4a33d1_WAVE_GLO_PHY_SWH_L3_NRT_014_001.7z.3d1\cmems_obs-wave_glo_phy-swh_nrt_c2-l3_PT1S_202211\cmems_obs-wave_glo_phy-swh_nrt_c2-l3_PT1S_2023.xlsx')
f_h2b = pd.read_excel(r'C:\Users\HP\AppData\Local\Temp\7ebf34e0-5fd8-42c4-a3a7-7811ce1eadf2_WAVE_GLO_PHY_SWH_L3_NRT_014_001.7z.df2\cmems_obs-wave_glo_phy-swh_nrt_h2b-l3_PT1S_202211\cmems_obs-wave_glo_phy-swh_nrt_h2b-l3_PT1S_2023.xlsx')
f_h2c = pd.read_excel(r'C:\Users\HP\AppData\Local\Temp\3d26f131-7fba-4f53-b446-e3d3c478f10f_WAVE_GLO_PHY_SWH_L3_NRT_014_001.7z.10f\cmems_obs-wave_glo_phy-swh_nrt_h2c-l3_PT1S_202211\cmems_obs-wave_glo_phy-swh_nrt_h2c-l3_PT1S_2023.xlsx')
f_j3 = pd.read_excel(r'C:\Users\HP\AppData\Local\Temp\d2d0e52f-9b1c-4613-9203-297b6878cf8c_WAVE_GLO_PHY_SWH_L3_NRT_014_001.7z.f8c\cmems_obs-wave_glo_phy-swh_nrt_j3-l3_PT1S_202211\cmems_obs-wave_glo_phy-swh_nrt_j3-l3_PT1S_2023.xlsx')
f_s3a = pd.read_excel(r'C:\Users\HP\Downloads\Copy of cmems_obs-wave_glo_phy-swh_nrt_s3a-l3_PT1S_2023.xlsx')
f_s3b = pd.read_excel(r'C:\Users\HP\Downloads\Copy of cmems_obs-wave_glo_phy-swh_nrt_s3b-l3_PT1S_2023.xlsx')
f_s6a = pd.read_excel(r'C:\Users\HP\AppData\Local\Temp\58eaf504-a13a-4179-8fee-ca19e90d08bf_WAVE_GLO_PHY_SWH_L3_NRT_014_001.7z.8bf\cmems_obs-wave_glo_phy-swh_nrt_s6a-l3_PT1S_202211\cmems_obs-wave_glo_phy-swh_nrt_s6a-l3_PT1S_2023.xlsx')

ft = pd.concat([f_al,f_c2,f_h2b,f_h2c,f_j3,f_s3a,f_s3b,f_s6a])

X = ft['wind'].values.reshape(-1, 1) 
y = ft['swh']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

model = LinearRegression()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

y_train_pred = model.predict(X_train)

# Calculate R-squared value
r2_train = "{:.2f}".format(math.sqrt(r2_score(y_train, y_train_pred)))
print(r2_train)

dataset= nc.Dataset(r"C:\Users\HP\Downloads\WAVERYS_20230701_R20230701.nc")
lon1 = dataset.variables['longitude'][:]
lat1 = dataset.variables['latitude'][:]
swh = dataset.variables['VHM0'][:].reshape(1,-1)
swh_p = model.predict(X_train)
Xi, Yi = np.meshgrid(np.arange(50, 100, 0.125), np.arange(0, 25, 0.125))

# Interpolate onto the regular grid
f = RegularGridInterpolator((lon1, lat1), swh_p[0,:,:].transpose())
Z = f((Xi, Yi))

# Plotting
plt.figure(figsize=(12, 6))

plt.subplot(121)
plt.pcolor(Xi, Yi, Z, shading='interp', cmap='jet')
plt.clim(0, 2)
plt.colorbar()
plt.gca().set_aspect('equal', adjustable='box')
plt.title('Predicted swh')
